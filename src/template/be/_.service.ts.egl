[%
import "../../common/lib/string.egl";
import "../../common/lib/entity.egl";
import "../../common/lib/attribute.egl";
import "../../common/lib/common.egl";
%]
import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Between, Like, Repository } from 'typeorm';
import { AbstractService } from 'src/common/abstract.service';
import { LoggedInUser } from 'src/users/entities/user.entity';
import { [%= entity.a_name.toPascalCase() %]Entity } from './entities/[%= entity.a_name.toKebabCase() %].entity';
import { Filter[%= entity.a_name.toPascalCase() %]Dto } from './dto/filter-[%= entity.a_name.toKebabCase() %].dto';
import { Create[%= entity.a_name.toPascalCase() %]Dto } from './dto/create-[%= entity.a_name.toKebabCase() %].dto';
import { Update[%= entity.a_name.toPascalCase() %]Dto } from './dto/update-[%= entity.a_name.toKebabCase() %].dto';
import { Import[%= entity.a_name.toPascalCase() %]Dto } from './dto/import-[%= entity.a_name.toKebabCase() %].dto';

@Injectable()
export class [%= entity.a_pluralName.toPascalCase() %]Service extends AbstractService<[%= entity.a_name.toPascalCase() %]Entity> {
  constructor(
    @InjectRepository([%= entity.a_name.toPascalCase() %]Entity)
    repository: Repository<[%= entity.a_name.toPascalCase() %]Entity>,
  ) {
    super([%= entity.a_pluralName.toPascalCase() %]Service.name, repository);
  }

  async findAllWithFilter(filter: Filter[%= entity.a_name.toPascalCase() %]Dto, user: LoggedInUser) {
    return this.repository
      .findAndCount({
        take: filter.take,
        skip: filter.skip,
        where: {
            isActive: true,
          	[% for (attr in entity.c_attribute) { %]
            [%= attr.text.toCamelCase() %]: Like(filter?.[%= attr.text.toCamelCase() %] ? `%${filter.[%= attr.text.toCamelCase() %]}%` : '%%'),
             [% } %]
        },
        order: {
          id: 'DESC',
        },
        relations: {
          // createdByUser: true,
        },
      })
      .then(([entities, count]) => {
        return {
          entities,
          count,
        };
      });
  }

  async create(input: Create[%= entity.a_name.toPascalCase() %]Dto, user: LoggedInUser) {
    /**
     * Vaidate input
    **/

    const [%= entity.a_name.toCamelCase() %] = this.repository.create(input);
    [%= entity.a_name.toCamelCase() %].createdBy = user.id;
    return this.repository.save([%= entity.a_name.toCamelCase() %]);
  }

  async update[%= entity.a_name.toPascalCase() %](id: number, input: Update[%= entity.a_name.toPascalCase() %]Dto, user: LoggedInUser) {
    const [%= entity.a_name.toCamelCase() %] = await this.repository.findOne({
      where: { id: id, isActive: true },
    });
    if ([%= entity.a_name.toCamelCase() %] === null) {
      throw new BadRequestException('Không tìm thấy [%= entity.a_name.toCamelCase() %] với ID: ' + id);
    }
    [% for (attr in entity.c_attribute) { %]
    if(input.[%= attr.text.toCamelCase() %]) [%= entity.a_name.toCamelCase() %].[%= attr.text.toCamelCase() %] = input.[%= attr.text.toCamelCase() %];
    [% } %]
    [%= entity.a_name.toCamelCase() %].updatedBy = user.id;
    return this.repository.save([%= entity.a_name.toCamelCase() %]);
  }

  async import[%= entity.a_name.toPascalCase() %](input: Import[%= entity.a_name.toPascalCase() %]Dto, user: LoggedInUser) {
     const data = input.data.map((item) => {
      return {
        ...item,
        createdBy: user.id,
      }
    });
    const result = await this.repository.save(data);
    if(result.length === input.data.length){
      return true;
    }
    return false;
  }
}
