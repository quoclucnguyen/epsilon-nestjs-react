[%
import "../common/lib/string.egl";
import "../common/lib/entity.egl";
%]
import { Module, forwardRef } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { [%= entity.a_name.toPascalCase() %]Service } from './[%= entity.a_name.toKebabCase() %].service';
import { [%= entity.a_name.toPascalCase() %]Entity } from './entities/[%= entity.a_name.toKebabCase() %].entity';
[% for (outgoingEntity in entity.outgoingEntities(false)) { %]
import { [%= outgoingEntity.a_name.toPascalCase() %]Module } from '../[%= outgoingEntity.a_name.toKebabCase() %]/[%=outgoingEntity.a_name.toKebabCase() %].module';
[% } %]
[% for (incomingEntity in entity.incomingEntities(false)) { %]
import { [%= incomingEntity.a_name.toPascalCase() %]Module } from '../[%= incomingEntity.a_name.toKebabCase() %]/[%=incomingEntity.a_name.toKebabCase() %].module';
[% } %]

@Module({
  imports: [
    TypeOrmModule.forFeature([[%= entity.a_name.toPascalCase() %]Entity]),
    [% for (outgoingEntity in entity.outgoingEntities(false)) { %]
    forwardRef(() => [%= outgoingEntity.a_name.toPascalCase() %]Module),
    [% } %]
    [% for (incomingEntity in entity.incomingEntities(false)) { %]
    forwardRef(() => [%= incomingEntity.a_name.toPascalCase() %]Module),
    [% } %]
  ],
  providers: [
    [%= entity.a_name.toPascalCase() %]Service,
  ],
  exports: [
    [%= entity.a_name.toPascalCase() %]Service,
  ],
})
export class [%= entity.a_name.toPascalCase() %]Module {
}
